/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NDMP_H_RPCGEN
#define _NDMP_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif


enum ndmp_header_message_type {
	NDMP_MESSAGE_REQUEST = 0,
	NDMP_MESSAGE_REPLY = 1,
};
typedef enum ndmp_header_message_type ndmp_header_message_type;
#define NDMP_MESSAGE_POST NDMP_MESSAGE_REQUEST

struct ndmp_pval {
	char *name;
	char *value;
};
typedef struct ndmp_pval ndmp_pval;

struct ndmp_u_quad {
	u_long high;
	u_long low;
};
typedef struct ndmp_u_quad ndmp_u_quad;

enum ndmp_error {
	NDMP_NO_ERR = 0,
	NDMP_NOT_SUPPORTED_ERR = 1,
	NDMP_DEVICE_BUSY_ERR = 2,
	NDMP_DEVICE_OPENED_ERR = 3,
	NDMP_NOT_AUTHORIZED_ERR = 4,
	NDMP_PERMISSION_ERR = 5,
	NDMP_DEV_NOT_OPEN_ERR = 6,
	NDMP_IO_ERR = 7,
	NDMP_TIMEOUT_ERR = 8,
	NDMP_ILLEGAL_ARGS_ERR = 9,
	NDMP_NO_TAPE_LOADED_ERR = 10,
	NDMP_WRITE_PROTECT_ERR = 11,
	NDMP_EOF_ERR = 12,
	NDMP_EOM_ERR = 13,
	NDMP_FILE_NOT_FOUND_ERR = 14,
	NDMP_BAD_FILE_ERR = 15,
	NDMP_NO_DEVICE_ERR = 16,
	NDMP_NO_BUS_ERR = 17,
	NDMP_XDR_DECODE_ERR = 18,
	NDMP_ILLEGAL_STATE_ERR = 19,
	NDMP_UNDEFINED_ERR = 20,
	NDMP_XDR_ENCODE_ERR = 21,
	NDMP_NO_MEM_ERR = 22,
	NDMP_CONNECT_ERR = 23,
	NDMP_SEQUENCE_NUM_ERR = 24,
	NDMP_READ_IN_PROGRESS_ERR = 25,
	NDMP_PRECONDITION_ERR = 26,
	NDMP_CLASS_NOT_SUPPORTED_ERR = 27,
	NDMP_VERSION_NOT_SUPPORTED_ERR = 28,
	NDMP_EXT_DUPL_CLASSES_ERR = 29,
	NDMP_EXT_DANDN_ILLEGAL_ERR = 30,
};
typedef enum ndmp_error ndmp_error;

enum ndmp_message {
	NDMP_CONNECT_OPEN = 0x900,
	NDMP_CONNECT_CLIENT_AUTH = 0x901,
	NDMP_CONNECT_CLOSE = 0x902,
	NDMP_CONNECT_SERVER_AUTH = 0x903,
	NDMP_CONFIG_GET_HOST_INFO = 0x100,
	NDMP_CONFIG_GET_CONNECTION_TYPE = 0x102,
	NDMP_CONFIG_GET_AUTH_ATTR = 0x103,
	NDMP_CONFIG_GET_BUTYPE_INFO = 0x104,
	NDMP_CONFIG_GET_FS_INFO = 0x105,
	NDMP_CONFIG_GET_TAPE_INFO = 0x106,
	NDMP_CONFIG_GET_SCSI_INFO = 0x107,
	NDMP_CONFIG_GET_SERVER_INFO = 0x108,
	NDMP_CONFIG_SET_EXT_LIST = 0x109,
	NDMP_CONFIG_GET_EXT_LIST = 0x10A,
	NDMP_SCSI_OPEN = 0x200,
	NDMP_SCSI_CLOSE = 0x201,
	NDMP_SCSI_GET_STATE = 0x202,
	NDMP_SCSI_RESET_DEVICE = 0x204,
	NDMP_SCSI_EXECUTE_CDB = 0x206,
	NDMP_TAPE_OPEN = 0x300,
	NDMP_TAPE_CLOSE = 0x301,
	NDMP_TAPE_GET_STATE = 0x302,
	NDMP_TAPE_MTIO = 0x303,
	NDMP_TAPE_WRITE = 0x304,
	NDMP_TAPE_READ = 0x305,
	NDMP_TAPE_EXECUTE_CDB = 0x307,
	NDMP_DATA_GET_STATE = 0x400,
	NDMP_DATA_START_BACKUP = 0x401,
	NDMP_DATA_START_RECOVER = 0x402,
	NDMP_DATA_ABORT = 0x403,
	NDMP_DATA_GET_ENV = 0x404,
	NDMP_DATA_STOP = 0x407,
	NDMP_DATA_LISTEN = 0x409,
	NDMP_DATA_CONNECT = 0x40A,
	NDMP_DATA_START_RECOVER_FILEHIST = 0x40B,
	NDMP_NOTIFY_DATA_HALTED = 0x501,
	NDMP_NOTIFY_CONNECTION_STATUS = 0x502,
	NDMP_NOTIFY_MOVER_HALTED = 0x503,
	NDMP_NOTIFY_MOVER_PAUSED = 0x504,
	NDMP_NOTIFY_DATA_READ = 0x505,
	NDMP_LOG_FILE = 0x602,
	NDMP_LOG_MESSAGE = 0x603,
	NDMP_FH_ADD_FILE = 0x703,
	NDMP_FH_ADD_DIR = 0x704,
	NDMP_FH_ADD_NODE = 0x705,
	NDMP_MOVER_GET_STATE = 0xA00,
	NDMP_MOVER_LISTEN = 0xA01,
	NDMP_MOVER_CONTINUE = 0xA02,
	NDMP_MOVER_ABORT = 0xA03,
	NDMP_MOVER_STOP = 0xA04,
	NDMP_MOVER_SET_WINDOW = 0xA05,
	NDMP_MOVER_READ = 0xA06,
	NDMP_MOVER_CLOSE = 0xA07,
	NDMP_MOVER_SET_RECORD_SIZE = 0xA08,
	NDMP_MOVER_CONNECT = 0xA09,
	NDMP_EXT_STANDARD_BASE = 0x10000,
	NDMP_EXT_PROPRIETARY_BASE = 0x20000000,
};
typedef enum ndmp_message ndmp_message;

enum ndmp_connection_status_reason {
	NDMP_CONNECTED = 0,
	NDMP_SHUTDOWN = 1,
	NDMP_REFUSED = 2,
};
typedef enum ndmp_connection_status_reason ndmp_connection_status_reason;

enum ndmp_auth_type {
	NDMP_AUTH_NONE = 0,
	NDMP_AUTH_TEXT = 1,
	NDMP_AUTH_MD5 = 2,
};
typedef enum ndmp_auth_type ndmp_auth_type;

enum ndmp_addr_type {
	NDMP_ADDR_LOCAL = 0,
	NDMP_ADDR_TCP = 1,
	NDMP_ADDR_RESERVED = 2,
	NDMP_ADDR_IPC = 3,
};
typedef enum ndmp_addr_type ndmp_addr_type;

struct ndmp_auth_attr {
	ndmp_auth_type auth_type;
	union {
		char challenge[64];
	} ndmp_auth_attr_u;
};
typedef struct ndmp_auth_attr ndmp_auth_attr;

struct ndmp_header {
	u_long sequence;
	u_long time_stamp;
	ndmp_header_message_type message_type;
	ndmp_message message_code;
	u_long reply_sequence;
	ndmp_error error_code;
};
typedef struct ndmp_header ndmp_header;

struct ndmp_notify_connection_status_post {
	ndmp_connection_status_reason reason;
	u_short protocol_version;
	char *text_reason;
};
typedef struct ndmp_notify_connection_status_post ndmp_notify_connection_status_post;

struct ndmp_connect_open_request {
	u_short protocol_version;
};
typedef struct ndmp_connect_open_request ndmp_connect_open_request;

struct ndmp_connect_open_reply {
	ndmp_error error;
};
typedef struct ndmp_connect_open_reply ndmp_connect_open_reply;

struct ndmp_config_get_server_info_reply {
	ndmp_error error;
	char *vendor_name;
	char *product_name;
	char *revision_number;
	struct {
		u_int auth_type_len;
		ndmp_auth_type *auth_type_val;
	} auth_type;
};
typedef struct ndmp_config_get_server_info_reply ndmp_config_get_server_info_reply;

struct ndmp_config_get_auth_attr_request {
	ndmp_auth_type auth_type;
};
typedef struct ndmp_config_get_auth_attr_request ndmp_config_get_auth_attr_request;

struct ndmp_config_get_auth_attr_reply {
	ndmp_error error;
	ndmp_auth_attr server_attr;
};
typedef struct ndmp_config_get_auth_attr_reply ndmp_config_get_auth_attr_reply;

struct ndmp_auth_md5 {
	char *auth_id;
	char auth_digest[16];
};
typedef struct ndmp_auth_md5 ndmp_auth_md5;

struct ndmp_auth_text {
	char *auth_id;
	char *auth_password;
};
typedef struct ndmp_auth_text ndmp_auth_text;

struct ndmp_auth_data {
	ndmp_auth_type auth_type;
	union {
		struct ndmp_auth_text auth_text;
		struct ndmp_auth_md5 auth_md5;
	} ndmp_auth_data_u;
};
typedef struct ndmp_auth_data ndmp_auth_data;

struct ndmp_connect_client_auth_request {
	ndmp_auth_data auth_data;
};
typedef struct ndmp_connect_client_auth_request ndmp_connect_client_auth_request;

struct ndmp_connect_client_auth_reply {
	ndmp_error error;
};
typedef struct ndmp_connect_client_auth_reply ndmp_connect_client_auth_reply;

struct ndmp_butype_info {
	char *butype_name;
	struct {
		u_int default_env_len;
		ndmp_pval *default_env_val;
	} default_env;
	u_long attrs;
};
typedef struct ndmp_butype_info ndmp_butype_info;

struct ndmp_config_get_butype_attr_reply {
	ndmp_error error;
	struct {
		u_int butype_info_len;
		ndmp_butype_info *butype_info_val;
	} butype_info;
};
typedef struct ndmp_config_get_butype_attr_reply ndmp_config_get_butype_attr_reply;

struct ndmp_config_get_connection_type_reply {
	ndmp_error error;
	struct {
		u_int addr_types_len;
		ndmp_addr_type *addr_types_val;
	} addr_types;
};
typedef struct ndmp_config_get_connection_type_reply ndmp_config_get_connection_type_reply;

struct ndmp_fs_info {
	u_long unsupported;
	char *fs_type;
	char *fs_logical_device;
	char *fs_physical_device;
	ndmp_u_quad total_size;
	ndmp_u_quad used_size;
	ndmp_u_quad avail_size;
	ndmp_u_quad total_inodes;
	ndmp_u_quad used_inodes;
	struct {
		u_int fs_env_len;
		ndmp_pval *fs_env_val;
	} fs_env;
	char *fs_status;
};
typedef struct ndmp_fs_info ndmp_fs_info;

struct ndmp_config_get_fs_info_reply {
	ndmp_error error;
	struct {
		u_int fs_info_len;
		ndmp_fs_info *fs_info_val;
	} fs_info;
};
typedef struct ndmp_config_get_fs_info_reply ndmp_config_get_fs_info_reply;

struct ndmp_ipc_addr {
	struct {
		u_int comm_data_len;
		char *comm_data_val;
	} comm_data;
};
typedef struct ndmp_ipc_addr ndmp_ipc_addr;

struct ndmp_tcp_addr {
	u_long ip_addr;
	u_short port;
	struct {
		u_int addr_env_len;
		ndmp_pval *addr_env_val;
	} addr_env;
};
typedef struct ndmp_tcp_addr ndmp_tcp_addr;

struct ndmp_addr {
	ndmp_addr_type addr_type;
	union {
		struct {
			u_int tcp_addr_len;
			ndmp_tcp_addr *tcp_addr_val;
		} tcp_addr;
		ndmp_ipc_addr ipc_addr;
	} ndmp_addr_u;
};
typedef struct ndmp_addr ndmp_addr;

struct ndmp_data_connect_request {
	ndmp_addr addr;
};
typedef struct ndmp_data_connect_request ndmp_data_connect_request;

struct ndmp_data_connect_reply {
	ndmp_error error;
};
typedef struct ndmp_data_connect_reply ndmp_data_connect_reply;

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_ndmp_header_message_type (XDR *, ndmp_header_message_type*);
extern  bool_t xdr_ndmp_pval (XDR *, ndmp_pval*);
extern  bool_t xdr_ndmp_u_quad (XDR *, ndmp_u_quad*);
extern  bool_t xdr_ndmp_error (XDR *, ndmp_error*);
extern  bool_t xdr_ndmp_message (XDR *, ndmp_message*);
extern  bool_t xdr_ndmp_connection_status_reason (XDR *, ndmp_connection_status_reason*);
extern  bool_t xdr_ndmp_auth_type (XDR *, ndmp_auth_type*);
extern  bool_t xdr_ndmp_addr_type (XDR *, ndmp_addr_type*);
extern  bool_t xdr_ndmp_auth_attr (XDR *, ndmp_auth_attr*);
extern  bool_t xdr_ndmp_header (XDR *, ndmp_header*);
extern  bool_t xdr_ndmp_notify_connection_status_post (XDR *, ndmp_notify_connection_status_post*);
extern  bool_t xdr_ndmp_connect_open_request (XDR *, ndmp_connect_open_request*);
extern  bool_t xdr_ndmp_connect_open_reply (XDR *, ndmp_connect_open_reply*);
extern  bool_t xdr_ndmp_config_get_server_info_reply (XDR *, ndmp_config_get_server_info_reply*);
extern  bool_t xdr_ndmp_config_get_auth_attr_request (XDR *, ndmp_config_get_auth_attr_request*);
extern  bool_t xdr_ndmp_config_get_auth_attr_reply (XDR *, ndmp_config_get_auth_attr_reply*);
extern  bool_t xdr_ndmp_auth_md5 (XDR *, ndmp_auth_md5*);
extern  bool_t xdr_ndmp_auth_text (XDR *, ndmp_auth_text*);
extern  bool_t xdr_ndmp_auth_data (XDR *, ndmp_auth_data*);
extern  bool_t xdr_ndmp_connect_client_auth_request (XDR *, ndmp_connect_client_auth_request*);
extern  bool_t xdr_ndmp_connect_client_auth_reply (XDR *, ndmp_connect_client_auth_reply*);
extern  bool_t xdr_ndmp_butype_info (XDR *, ndmp_butype_info*);
extern  bool_t xdr_ndmp_config_get_butype_attr_reply (XDR *, ndmp_config_get_butype_attr_reply*);
extern  bool_t xdr_ndmp_config_get_connection_type_reply (XDR *, ndmp_config_get_connection_type_reply*);
extern  bool_t xdr_ndmp_fs_info (XDR *, ndmp_fs_info*);
extern  bool_t xdr_ndmp_config_get_fs_info_reply (XDR *, ndmp_config_get_fs_info_reply*);
extern  bool_t xdr_ndmp_ipc_addr (XDR *, ndmp_ipc_addr*);
extern  bool_t xdr_ndmp_tcp_addr (XDR *, ndmp_tcp_addr*);
extern  bool_t xdr_ndmp_addr (XDR *, ndmp_addr*);
extern  bool_t xdr_ndmp_data_connect_request (XDR *, ndmp_data_connect_request*);
extern  bool_t xdr_ndmp_data_connect_reply (XDR *, ndmp_data_connect_reply*);

#else /* K&R C */
extern bool_t xdr_ndmp_header_message_type ();
extern bool_t xdr_ndmp_pval ();
extern bool_t xdr_ndmp_u_quad ();
extern bool_t xdr_ndmp_error ();
extern bool_t xdr_ndmp_message ();
extern bool_t xdr_ndmp_connection_status_reason ();
extern bool_t xdr_ndmp_auth_type ();
extern bool_t xdr_ndmp_addr_type ();
extern bool_t xdr_ndmp_auth_attr ();
extern bool_t xdr_ndmp_header ();
extern bool_t xdr_ndmp_notify_connection_status_post ();
extern bool_t xdr_ndmp_connect_open_request ();
extern bool_t xdr_ndmp_connect_open_reply ();
extern bool_t xdr_ndmp_config_get_server_info_reply ();
extern bool_t xdr_ndmp_config_get_auth_attr_request ();
extern bool_t xdr_ndmp_config_get_auth_attr_reply ();
extern bool_t xdr_ndmp_auth_md5 ();
extern bool_t xdr_ndmp_auth_text ();
extern bool_t xdr_ndmp_auth_data ();
extern bool_t xdr_ndmp_connect_client_auth_request ();
extern bool_t xdr_ndmp_connect_client_auth_reply ();
extern bool_t xdr_ndmp_butype_info ();
extern bool_t xdr_ndmp_config_get_butype_attr_reply ();
extern bool_t xdr_ndmp_config_get_connection_type_reply ();
extern bool_t xdr_ndmp_fs_info ();
extern bool_t xdr_ndmp_config_get_fs_info_reply ();
extern bool_t xdr_ndmp_ipc_addr ();
extern bool_t xdr_ndmp_tcp_addr ();
extern bool_t xdr_ndmp_addr ();
extern bool_t xdr_ndmp_data_connect_request ();
extern bool_t xdr_ndmp_data_connect_reply ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_NDMP_H_RPCGEN */
